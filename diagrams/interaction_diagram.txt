@startuml
collections Anonymous
participant Coordinator
participant Alice1
participant Alice2
participant Bob
database Mempool

title Scenario: A Participant Is Consolidating 2 Coins (Alice1, Alice2) Into 1 (Bob) with a fake reissuance request \n

== Input Registration ==

Anonymous -> Coordinator ++ : GET coordinator-status
return RoundStatuses[]

Alice1 -> Coordinator ++: POST inputs-registration: RoundId, (Input, RoundParamSig)[], ZeroCredReqs[]
note right of Coordinator
    IsRoundFound()
    IsInputRegistrationPhase()
    AllUnspent()
    AllConfirmed()
    AllMature()
    AllStandardScript()
    AllNotMalleable()
    CheckRoundParamSigs()
    AllAllowedIfBlameRound()
    AllNotBanned()
    UpdateIfDuplicateInput()
    SetAliceDeadline()
end note
return AliceId, ZeroCreds[]
...

Alice1 -> Coordinator ++: POST connection-confirmation: RoundId, AliceId, RealCredReqs[], ZeroCredReqs[]
note right of Coordinator
    IsRoundFound()
    IsInputRegistrationOrConnectionConfirmationPhase()
    IsAliceFound()
    EnsureUniqueSerialNumber()
    CheckCredProofs()
    ResetAliceDeadline()
end note
return Creds[] (zero)

Alice2 -> Coordinator ++: POST inputs-registration: RoundId, (Input, RoundParamSig)[], ZeroCredReqs[]
note right of Coordinator
    IsRoundFound()
    IsInputRegistrationPhase()
    AllUnspent()
    AllConfirmed()
    AllMature()
    AllStandardScript()
    AllNotMalleable()
    CheckRoundParamSigs()
    AllAllowedIfBlameRound()
    AllNotBanned()
    UpdateIfDuplicateInput()
    SetAliceDeadline()
end note
return AliceId, ZeroCreds[]

== Connection Confirmation ==

Alice1 -> Coordinator ++: POST connection-confirmation: RoundId, AliceId, RealCredReqs[], ZeroCredReqs[]
note right of Coordinator
    IsRoundFound()
    IsInputRegistrationOrConnectionConfirmationPhase()
    IsAliceFound()
    EnsureUniqueSerialNumber()
    CheckCredProofs()
end note
return Creds[] (real)

Alice2 -> Coordinator ++: POST connection-confirmation: RoundId, AliceId, RealCredReqs[], ZeroCredReqs[]
note right of Coordinator
    IsRoundFound()
    IsInputRegistrationOrConnectionConfirmationPhase()
    IsAliceFound()
    EnsureUniqueSerialNumber()
    CheckCredProofs()
end note
return Creds[] (real)

Anonymous -> Coordinator ++: POST credential-reissuance: RoundId, CredReqs[]
note right of Coordinator
    IsRoundFound()
    IsInputConnectionConfirmationOrOutputRegistrationPhase()
    EnsureUniqueSerialNumber()
    CheckCredProofs()
end note
return Creds[]

== Output Registration ==

Bob -> Coordinator ++: POST output-registration: RoundId, Output, PresentedCreds[]
note right of Coordinator
    IsRoundFound()
    IsOutputRegistrationPhase()
    IsStandardScript()
    EnsureUniqueSerialNumber()
    CheckCredProofs()
end note
return UnsignedTransactionSecret

== Transaction Signing ==

Anonymous -> Coordinator ++ : coordinator-status
return RoundStatuses[]

Alice1 -> Coordinator ++: POST transaction-signatures: RoundId, AliceId, (Input, Signature)[]
note right of Coordinator
    IsRoundFound()
    IsTransactionSigningPhase()
    IsAliceFound()
    CheckInputSignatures()
    UpdateIfAlreadySigned()
end note
return ACK

Alice2 -> Coordinator ++: POST transaction-signatures: RoundId, AliceId, (Input, Signature)[]
note right of Coordinator
    IsRoundFound()
    IsTransactionSigningPhase()
    IsAliceFound()
    CheckInputSignatures()
    UpdateIfAlreadySigned()
end note
return ACK

== Transaction Broadcasting ==

Coordinator -> Mempool**  : SignedTransaction

Anonymous -> Coordinator ++ : coordinator-status
return RoundStatuses[]

@enduml
